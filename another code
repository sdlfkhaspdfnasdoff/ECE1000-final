#include <Keypad.h>
#include <Servo.h>

// ---------------- Pin Definitions ----------------
const int buzzerPin = 11;
const int greenLEDPin = 12;
const int redLEDPin = 13;
const int trigPin = A0;
const int echoPin = A1;
const int servoPin = A2;

// ---------------- Components ----------------
Servo gateServo;

// ---------------- Keypad Setup ----------------
const byte ROWS = 4;
const byte COLS = 4;
char keys[ROWS][COLS] = {
  {'1','2','3','A'},
  {'4','5','6','B'},
  {'7','8','9','C'},
  {'*','0','#','D'}
};

// Update to match your physical wiring (D10 to D3)
byte rowPins[ROWS] = {10, 9, 8, 7}; // Row 1–4 → D10, D9, D8, D7
byte colPins[COLS] = {6, 5, 4, 3};  // Col 1–4 → D6, D5, D4, D3

Keypad keypad = Keypad(makeKeymap(keys), rowPins, colPins, ROWS, COLS);

bool gateOpen = false;
unsigned long clearSince = 0; // Timer for safe closing
const float CLOSE_THRESHOLD = 4.0;

void setup() {
  pinMode(buzzerPin, OUTPUT);
  pinMode(greenLEDPin, OUTPUT);
  pinMode(redLEDPin, OUTPUT);
  pinMode(trigPin, OUTPUT);
  pinMode(echoPin, INPUT);

  gateServo.attach(servoPin);
  gateServo.write(0); // Gate starts closed

  Serial.begin(9600);
}

void loop() {
  char key = keypad.getKey();
  if (key) {
    Serial.print("Key Pressed: ");
    Serial.println(key);

    if (key == 'A') {
      if (!gateOpen) {
        openGate();
      } else {
        signalRedLED(); // Already open
      }
    } else {
      signalRedLED(); // Wrong key
    }
  }

  // Check sensor if gate is open
  if (gateOpen) {
    float distance = getDistanceInInches();
    Serial.print("Distance: ");
    Serial.println(distance);

    if (distance > CLOSE_THRESHOLD) {
      if (clearSince == 0) {
        clearSince = millis(); // Start 2-sec timer
      } else if (millis() - clearSince >= 2000) {
        closeGate();
        clearSince = 0;
      }
    } else {
      clearSince = 0; // Car still there
    }

    delay(200);
  }
}

// ---------------- Helper Functions ----------------

void openGate() {
  digitalWrite(greenLEDPin, HIGH);
  playBuzzer();
  gateServo.write(90);
  gateOpen = true;
  delay(2000); // Green LED on for 2 sec
  digitalWrite(greenLEDPin, LOW);
}

void closeGate() {
  gateServo.write(0);
  gateOpen = false;
  playBuzzer();
}

void playBuzzer() {
  digitalWrite(buzzerPin, HIGH);
  delay(200);
  digitalWrite(buzzerPin, LOW);
}

void signalRedLED() {
  digitalWrite(redLEDPin, HIGH);
  delay(2000);
  digitalWrite(redLEDPin, LOW);
}

float getDistanceInInches() {
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);

  long duration = pulseIn(echoPin, HIGH, 30000); // 30ms timeout
  float inches = duration * 0.0133 / 2;
  return inches;
}
